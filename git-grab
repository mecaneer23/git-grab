#!/usr/bin/env python3
# pylint: disable=missing-docstring, invalid-name

from argparse import ArgumentParser, Namespace
from json import loads
from pathlib import Path
from re import findall
from sys import exit as sys_exit
from urllib.request import urlopen, urlretrieve


def parse_args() -> Namespace:
    parser = ArgumentParser()
    parser.add_argument(
        "url",
        type=str,
    )
    parser.add_argument(
        "path",
        type=str,
        nargs="?",
        default="",
    )

    return parser.parse_args()


def get_url_domain(url: str) -> str:
    return url.split("//", maxsplit=1)[1].split("/")[0]


def get_url_user_name(url: str) -> str:
    return url.split("/")[-2]


def get_url_repo_name(url: str) -> str:
    return url.rsplit("/", maxsplit=1)[1]


def md_line_to_py(line: str) -> str:
    return findall(r"\[([^\)]+)\]", line.split(" ", maxsplit=1)[1])[0]


def md_list_to_py(
    first_line_idx: int,
    last_line_idx: int,
    filename: Path = Path("README.md"),
) -> list[str]:
    """
    Convert a markdown list to a python list.

    Inspired from https://github.com/mecaneer23/Ndo/blob/main/src/md_to_py.py
    md_table_to_lines() function
    """

    with filename.open(encoding="utf-8") as file:
        lines = file.readlines()[first_line_idx - 1 : last_line_idx - 1]

    return list(map(md_line_to_py, lines))


def get_default_branch(user_name: str, repo_name: str) -> str:
    with urlopen(f"https://api.github.com/repos/{user_name}/{repo_name}") as response:
        return loads(response.read().decode("utf-8"))["default_branch"]


def get_repo_files(user_name: str, repo_name: str, branch: str) -> list[str]:
    with urlopen(
        f"https://api.github.com/repos/{user_name}/{repo_name}/git/trees/{branch}?recursive=1"
    ) as response:
        raw_json = loads(response.read().decode("utf-8"))

    output: list[str] = []
    for file_or_folder in raw_json["tree"]:
        if file_or_folder["type"] == "tree":
            continue
        output.append(file_or_folder["path"])
    return output


def get_download_url(user_name: str, repo_name: str, filename: str) -> str:
    with urlopen(
        f"https://api.github.com/repos/{user_name}/{repo_name}/contents/{filename}"
    ) as response:
        return loads(response.read().decode("utf-8"))["download_url"]


def download_files(
    user_name: str, repo_name: str, files_list: list[str], output_path: Path
) -> None:
    for file in files_list:
        urlretrieve(
            get_download_url(user_name, repo_name, file),
            output_path.joinpath(file),
        )


def validate_url(url: str) -> None:
    try:
        implemented_urls = md_list_to_py(
            36,
            37,
            Path(__file__).parent.joinpath("README.md"),
        )
        if get_url_domain(url) not in implemented_urls:
            raise ValueError(
                f"Invalid url, valid urls are one of the following: {implemented_urls}"
            )
    except FileNotFoundError:
        print("Warning: unable to validate url domain")


def main() -> None:
    args = parse_args()
    url: str = args.url
    str_path: str = args.path or get_url_repo_name(url)
    path: Path = Path(str_path)

    validate_url(url)

    user_name = get_url_user_name(url)
    repo_name = get_url_repo_name(url)
    files = get_repo_files(
        user_name, repo_name, get_default_branch(user_name, repo_name)
    )

    try:
        path.mkdir()
    except FileExistsError:
        sys_exit(f"File exists: `{path}`. Try adding a path.")

    download_files(
        user_name,
        repo_name,
        files,
        path,
    )

    print(f"Successfully downloaded {len(files)} files to new folder `{path}`")


if __name__ == "__main__":
    main()
